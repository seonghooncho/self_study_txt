List<String> list1	(int는 안됨,형 일치해야함)
//toArray
String[] array = list1.toArray(new String[0]);	//(String[]::new)도 가능

//List로 변환
List<String> list2 = Arrays.asList(array);

//ArrayList로 변환
ArrayList<String> list2 = new ArrayList<>(Arrays.asList(array));

StringBuilder sb
문자열을 append, insert, delete, reverse() 가능
어떤 형태든 sb.append()로 추가가능
->String : sb.toString()


int n
->String : String.valueOf(n)	//람다 : .map(String::valueOf)

String sn
->int : Integer.parseInt(sn);
->long : Long.parseLong(sn);
->char[] : sn.toCharArray()

char c
->int : Character.getNumericValue(c)
->String : String.valueOf(c)

stream
//문자열→ 스트림	String s			s.chars()

//리스트→ 스트림	List<Integer> list	list.stream()
//배열→ 스트림 		char[], int[] array	Arrays.stream(array)
.boxed() 	기본형을 래퍼클래스로
int[] intArray 와 같은 배열은 Arrays.stream(intArray) 와 같은 방식으로 스트림 변환
List<Integer> intList 처럼 리스트는 그대로 intList.stream() 할 수 있음

사용자로부터 값 입력받기 (scanf)
public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
        String s = bf.readLine(); // 문자열 입력
        int i = Integer.parseInt(bf.readLine()); // 정수 입력
    }

출력하기 (print)BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));   //할당된 버퍼에 값 넣어주기
String s = "abcdefg";   //출력할 문자열
bw.write(s+"\n");   //버퍼에 있는 값 전부 출력
bw.flush();   //남아있는 데이터를 모두 출력시킴
bw.close();   //스트림을 닫음


문자열 공백기준 분리
1.1.1.1.1.1.1. 
StringTokenizer st = new StringTokenizer(s); //StringTokenizer인자값에 입력 문자열 넣음
int a = Integer.parseInt(st.nextToken()); //첫번째 호출
int b = Integer.parseInt(st.nextToken()); //두번째 호출
1.1.1.1.1.1.2. 
String array[] = s.split(" "); //공백마다 데이터 끊어서 배열에 넣음
