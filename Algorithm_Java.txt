=====================================================================================================================================================================
자료형 변환하기
-------------------------------------------------------------------------------------------------------------------
List<String> list1	(int는 안됨,형 일치해야함)
//toArray
String[] array = list1.toArray(new String[0]);	//(String[]::new)도 가능
-------------------------------------------------------------------------------------------------------------------
//List로 변환
List<String> list2 = Arrays.asList(array);
-------------------------------------------------------------------------------------------------------------------
//ArrayList로 변환
ArrayList<String> list2 = new ArrayList<>(Arrays.asList(array));
-------------------------------------------------------------------------------------------------------------------
StringBuilder sb
문자열을 append, insert, delete, reverse() 가능
어떤 형태든 sb.append()로 추가가능
->String : sb.toString()
-------------------------------------------------------------------------------------------------------------------
int n
->String : String.valueOf(n)	//람다 : .map(String::valueOf)
-------------------------------------------------------------------------------------------------------------------
String sn
->int : Integer.parseInt(sn);
->long : Long.parseLong(sn);
->char[] : sn.toCharArray()
-------------------------------------------------------------------------------------------------------------------
char c
->int : Character.getNumericValue(c)
->String : String.valueOf(c)
-------------------------------------------------------------------------------------------------------------------
stream
//문자열→ 스트림	String s			s.chars()
//리스트→ 스트림	List<Integer> list	list.stream()
//배열→ 스트림 		char[], int[] array	Arrays.stream(array)
-------------------------------------------------------------------------------------------------------------------
.boxed() 	기본형을 래퍼클래스로
int[] intArray 와 같은 배열은 Arrays.stream(intArray) 와 같은 방식으로 스트림 변환
List<Integer> intList 처럼 리스트는 그대로 intList.stream() 할 수 있음

=====================================================================================================================================================================
입출력
-------------------------------------------------------------------------------------------------------------------
입력 (scanf)
public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
        String s = bf.readLine(); // 문자열 입력
        int i = Integer.parseInt(bf.readLine()); // 정수 입력
    }
-------------------------------------------------------------------------------------------------------------------
출력 (print)BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));   //할당된 버퍼에 값 넣어주기
String s = "abcdefg";   //출력할 문자열
bw.write(s+"\n");   //버퍼에 있는 값 전부 출력
bw.flush();   //남아있는 데이터를 모두 출력시킴
bw.close();   //스트림을 닫음

=====================================================================================================================================================================

문자열 공백기준 분리
1.1.1.1.1.1.1. 
StringTokenizer st = new StringTokenizer(s); //StringTokenizer인자값에 입력 문자열 넣음
int a = Integer.parseInt(st.nextToken()); //첫번째 호출
int b = Integer.parseInt(st.nextToken()); //두번째 호출
1.1.1.1.1.1.2. 
String array[] = s.split(" "); //공백마다 데이터 끊어서 배열에 넣음

====================================================================================================================================================================
정렬하기
-------------------------------------------------------------------------------------------------------------------
Map 값 기준 내림차순 정렬 1
List<Character> keySet = new ArrayList<>(alphabetMap.keySet());
        keySet.sort(new Comparator<Character>() {
            @Override
            public int compare(Character o1, Character o2) {
                return alphabetMap.get(o2).compareTo(alphabetMap.get(o1)); // 내림차순
            }
        });
-------------------------------------------------------------------------------------------------------------------
Map 값 기준 내림차순 정렬 2
        List<Map.Entry<Character, Integer>> entryList = new ArrayList<>(alphabetMap.entrySet());
        entryList.sort(Map.Entry.comparingByValue(Comparator.reverseOrder()));
-------------------------------------------------------------------------------------------------------------------
Map value에 값 더할때
map.put(c, map.getOrDefault(c, 0) + weight);
//map에 해당 key 있으면 채워주고 없으면 만들어줌
//map.get은 없으면 못함, getOrDefault(c, 0) 사용


====================================================================================================================================================================
슬라이딩 윈도우기법
        //end의 값 하나씩 올리고 start의 값 내릴 수 있는 만큼 계속 내림
        while (end < n) {
            sum += nList[end++];

            while (sum >= s) {
                min = Math.min(min, end - start);
                sum -= nList[start++];
            }
        }
